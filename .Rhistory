)
) + labs(
title = paste0(geneName),
y = "Expression (TPM)",
x = "Days"
)
print(p1)
p1
# This installation step only needs to be run once on your computer.
requiredPackages <- c("RMySQL", "ggplot2", "ggrepel", "ComplexHeatmap","circlize","tibble","DT", "fgsea")
installedPackages <- installed.packages()[,"Package"]
notInstalled <- requiredPackages[!(requiredPackages %in%  installedPackages)]
if (length(notInstalled) > 0){
sapply(notInstalled, install.packages)
}
devtools::install_github("decusinlabore/bioLOGIC")
username <- "RN20157_da"
pass <- "rjQXNGDw"
host <- "10.27.241.82"
db <- "knl_data"
designTB <- "RN20157_designTable"
mainTB <- "RN20157_rna_seq_table"
pcaTB <- "RN20157_PCA"
species <- "homo_sapiens"
geneIDcolumn <- "hgnc_symbol"
alignmentGeneID <- "ENSG"
designTScol <- "timepoint"
library(bioLOGIC)
## Load the design table from database. Here we will retrieve information on samples.
dfDesign <- import.db.table.from.db(
dbname = db,
dbtable = designTB,
host = host,
user = username,
password = pass
)
dfData <- import.db.table.from.db(
dbname = db,
dbtable = mainTB,
host = host,
user = username,
password = pass
)
library(bioLOGIC)
## Load the design table from database. Here we will retrieve information on samples.
dfDesign <- import.db.table.from.db(
dbname = db,
dbtable = designTB,
host = host,
user = username,
password = pass
)
dfDesign[["dataseries"]] <- sapply(
dfDesign$sample_group,
function(x) unlist(strsplit(x, "_"))[1]
)
##############################################################################
## Removing the day10 timepoint. Comment this block out to add it back in
dfDesign <- dfDesign[dfDesign$timepoint != 10, ]
##
##############################################################################
## Now let's select the columns we really need in dfDesign ##
designSelVec <- c("sample_id", "sample_group","dataseries", "timepoint")
dfDesign <- unique(dfDesign[,designSelVec])
dfData <- import.db.table.from.db(
dbname = db,
dbtable = mainTB,
host = host,
user = username,
password = pass
)
selVec <- c(
geneIDcolumn,
names(dfData)[grep("norm_counts", names(dfData))]
)
## Let's select those columns ##
dfData <- unique(dfData[, selVec])
## Edit the column names so they match the design file sample.ids
names(dfData) <- gsub("norm_counts_", "", names(dfData))
names(dfData) <- gsub("_TPM", "", names(dfData))
## Now let's select a gene for plotting:
## You can start here if you want to plot another gene from the same dataset
geneName <- "KLF17"
dfPlot <- dfData[dfData$hgnc_symbol == geneName, ]
row.names(dfPlot) <- "y"
dfPlot$hgnc_symbol <- NULL
## If the selected gene is present in the dataset, dfPlot will have one row (and 0 if it is NOT present):
nrow(dfPlot)
dfPlot <- data.frame(t(dfPlot))
## Create sample.id column ##
dfPlot[["sample_id"]] <- row.names(dfPlot)
## Now let's add the timepoint information to the expression data ##
dfPlot <- merge(
dfDesign,
dfPlot,
by.x = "sample_id",
by.y = "sample_id"
)
## Done                                                                      ##
###############################################################################
## And here is the resulting gene expression table
head(dfPlot)
library(ggplot2)
library(tidyverse)
plotList <- list()
tag <- paste0("Linechart_", geneName)
confidenceAlpaha = 0.05
dfPlot <- dfPlot %>% group_by(sample_group) %>% summarize(SD = sd(y), Median = median(y), Mean=mean(y), y, timepoint, dataseries, sample_id)
p1 <- ggplot(data = dfPlot
) + geom_line(aes(color = dataseries, x = timepoint, y=Mean)
) + geom_ribbon(aes(x = timepoint, y=Mean, ymin = Mean - SD, ymax = Mean + SD, fill = dataseries), alpha = 0.1, color = NA
) + geom_point(aes(color = dataseries, x = timepoint, y=y)
) + scale_color_manual(values = c("#000099", "#009900")
) + scale_fill_manual(values = c("#000099", "#009900")
) + theme_bw(
) + theme(
axis.text.y   = element_text(size=12),
axis.text.x   = element_text(size=12),
axis.title.y  = element_text(size=14),
axis.title.x  = element_text(size=14),
axis.line = element_line(colour = "black"),
panel.border = element_rect(colour = "black", fill=NA, size=1),
plot.title = element_text(face = "bold.italic", hjust = 0.5, size = 18
)
) + labs(
title = paste0(geneName),
y = "Expression (TPM)",
x = "Days"
)
print(p1)
rm(list=ls())
devtools::install_github("decusInLabore/biologicSeqTools")
devtools::install_github("decusinlabore/biologicViewerSC"
)
all.genes <- rownames(pbmc_small)
library(Seurat)
library(dplyr)
library(Seurat)
library(dplyr)
library(biologicViewerSC)
library(biologicSeqTools)
detach("package:ellipsis", unload = T)
detach("package::ellipsis", unload = T)
detach("package:ellipsis", unload = T)
remove.packages(ellipsis)
remove.packages("ellipsis")
install.packages("devtools")
install.packages("devtools")
install.packages("devtools")
install.packages("devtools")
devtools::install_github("decusInLabore/biologicSeqTools")
devtools::install_github("decusinlabore/biologicViewerSC")
install.packages("devtools")
install.packages("devtools")
devtools::install_github("decusInLabore/biologicSeqTools")
devtools::install_github("decusinlabore/biologicViewerSC")
devtools::install_github("decusInLabore/biologicSeqTools")
install.packages("devtools")
devtools::install_github("decusInLabore/biologicSeqTools")
getwd()
project_id = project_id
projectPath = projectPath
params = params
menuParametersFN = "menuParameters.txt"
colorParametersFN = "colorParameters.txt"
getwd()
install.packages("remotes")
remotes::install_github("decusInLabore/biologicSeqTools")
remotes::install_github("decusinlabore/biologicViewerSC")
install.packages("remotes")
install.packages("remotes")
rm(list=ls())
remotes::install_github("decusInLabore/biologicSeqTools")
remotes::install_github("decusInLabore/biologicSeqTools")
getwd()
knitr::opts_chunk$set(
tidy = TRUE,
tidy.opts = list(width.cutoff = 120),
message = FALSE,
warning = FALSE
)
## libraries ##
#library(tidyverse)
#library(scales)
VersionPdfExt <- paste0(".V", gsub("-", "", Sys.Date()), ".pdf")
if (dir.exists("/Volumes/babs/working/boeings/")){
hpc.mount <- "/Volumes/babs/working/boeings/"
} else if (dir.exists("Y:/working/boeings/")){
hpc.mount <- "Y:/working/boeings/"
} else if (dir.exists("/camp/stp/babs/working/boeings/")){
hpc.mount <- "/camp/stp/babs/working/boeings/"
} else {
hpc.mount <- ""
}
#Create the environment and load a suitable version of R, e.g. so:
FN <- paste0(hpc.mount, "Projects/reference_data/documentation/BC.parameters.txt")
dbTable <- read.delim(
FN,
sep = "\t",
stringsAsFactors = F
)
db.pwd <- as.vector(dbTable[1,1])
###############################################################################
##                                                                           ##
if (!requireNamespace("remotes")){
install.packages("remotes")
}
remotes::install_github("rstudio/renv")
username <- "testExperiment_da"
pass <- "KLMYk8eC"
host <- "10.27.241.82"
db <- "agl_data"
designTB <- "testExperiment_designTable"
mainTB <- "testExperiment_bulk_rna_seq_table"
pcaTB <- "testExperiment_PCA"
species <- "mus_musculus"
geneIDcolumn <- "mgi_symbol"
alignmentGeneID <- "ENSMUSG"
designTScol <- "timepoint"
devtools::install_github("decusinlabore/bioLOGIC")
#}
library(bioLOGIC)
## Load the design table from database. Here we will retrieve information on samples.
dfDesign <- import.db.table.from.db(
dbname = db,
dbtable = designTB,
host = host,
user = username,
password = pass
)
dfMainData <- import.db.table.from.db(
dbname = db,
dbtable = mainTB,
host = host,
user = username,
password = pass
)
dfPCA <- import.db.table.from.db(
dbname = db,
dbtable = pcaTB,
host = host,
user = username,
password = pass
)
dfVar <- dfMainData[dfMainData$logFC_cut_off != 0 ,c(geneIDcolumn, alignmentGeneID)]
mostVarGenes <- as.vector(unique(sort(dfVar[,geneIDcolumn])))
mostVarGenes <- na.omit(mostVarGenes[mostVarGenes != ""])
# Most variable gene IDs
mostVarIDs <- as.vector(unique(sort(dfVar[,alignmentGeneID])))
mostVarIDs <- na.omit(mostVarIDs[mostVarIDs != ""])
username <- "testExperiment_da"
pass <- "KLMYk8eC"
host <- "10.27.241.82"
db <- "agl_data"
designTB <- "testExperiment_designTable"
mainTB <- "testExperiment_bulk_rna_seq_table"
pcaTB <- "testExperiment_PCA"
species <- "mus_musculus"
geneIDcolumn <- "mgi_symbol"
alignmentGeneID <- "ENSMUSG"
designTScol <- "timepoint"
dfDesign <- import.db.table.from.db(
dbname = db,
dbtable = designTB,
host = host,
user = username,
password = pass
)
dfMainData <- import.db.table.from.db(
dbname = db,
dbtable = mainTB,
host = host,
user = username,
password = pass
)
dfPCA <- import.db.table.from.db(
dbname = db,
dbtable = pcaTB,
host = host,
user = username,
password = pass
)
head(dfDesign)
username <- "testExperiment_da"
pass <- "KLMYk8eC"
host <- "10.27.241.82"
db <- "agl_data"
designTB <- "testExperiment_designTable"
mainTB <- "testExperiment_bulk_rna_seq_table"
pcaTB <- "testExperiment_PCA"
species <- "mus_musculus"
geneIDcolumn <- "mgi_symbol"
alignmentGeneID <- "ENSMUSG"
designTScol <- "timepoint"
library(bioLOGIC)
## Load the design table from database. Here we will retrieve information on samples.
dfDesign <- import.db.table.from.db(
dbname = db,
dbtable = designTB,
host = host,
user = username,
password = pass
)
dfMainData <- import.db.table.from.db(
dbname = db,
dbtable = mainTB,
host = host,
user = username,
password = pass
)
dfPCA <- import.db.table.from.db(
dbname = db,
dbtable = pcaTB,
host = host,
user = username,
password = pass
)
dfPCA
200/5000
dfCat <- read.delim(
"C:/Users/boeings/OneDrive - The Francis Crick Institute/Desktop/SC21185.signature.gene.sets_MM.txt",
sep = "\t",
stringsAsFactors = F
)
dfAnno <- read.delim(
"Y:/working/boeings/Projects/reference_data/gene_id_annotation_files/20171206.release-89.mm.ENSMUSG.mgi.entrez.uniprot.description.hgnc.table.txt",
sep = "\t",
header =T,
stringsAsFactors = F
)
View(dfCat)
ncol(dfCat)
transGenes <- unique(dfCat[,16])
transGenes
transGenes <- unique(dfCat[2:nrow(dfCat),16])
transGenes
transGenes <- transGenes[transGenes != ""]
dfAnno <- unique(dfAnno[,c("hgnc_symbol", "mgi_symbol")])
head(dfAnno)
dfAnno <- dfAnno[dfAnno$hgnc_symbol != "",]
dfTrans <- dfAnno[dfAnno$mgi_symbol %in% transGenes, ]
dfTrans
dfTrans <- dfAnno[dfAnno$hgnc_symbol %in% transGenes, ]
dfTrans
dim(dfTrans)
write.table(
dfTrans,
"C:/Users/boeings/OneDrive - The Francis Crick Institute/Desktop/genes16.txt",
sep = "\t",
row.names=F
)
transGenes <- unique(dfCat[2:nrow(dfCat),17])
transGenes <- transGenes[transGenes != ""]
dfTrans <- dfAnno[dfAnno$hgnc_symbol %in% transGenes, ]
write.table(
dfTrans,
"C:/Users/boeings/OneDrive - The Francis Crick Institute/Desktop/genes17.txt",
sep = "\t",
row.names=F
)
username <- "RN21224_da"
pass <- "cDCSpknd"
host <- "10.27.241.82"
db <- "dal_data"
designTB <- "RN21224_designTable"
mainTB <- "RN21224_bulk_rna_seq_table"
pcaTB <- "RN21224_PCA"
species <- "mus_musculus"
geneIDcolumn <- "mgi_symbol"
alignmentGeneID <- "ENSMUSG"
devtools::install_github("decusinlabore/bioLOGIC")
#}
library(bioLOGIC)
## Load the design table from database. Here we will retrieve information on samples.
dfDesign <- import.db.table.from.db(
dbname = db,
dbtable = designTB,
host = host,
user = username,
password = pass
)
dfDesign
dfMainData <- import.db.table.from.db(
dbname = db,
dbtable = mainTB,
host = host,
user = username,
password = pass
)
DotPlot(
object = OsC_DP,
assay =  "RNA",
features = dpGenes,
cols = c("lightgrey", "blue"),
col.min = -2.5,
col.max = 2.5,
dot.min = 0,
dot.scale = 6,
#idents = NULL,
group.by = NULL,
split.by = NULL,
#cluster.idents = FALSE,
scale = TRUE,
scale.by = "radius",
scale.min = NA,
scale.max = NA
)
getwd()
R.version
if (dir.exists("/Volumes/babs/working/boeings/")){
hpc.mount <- "/Volumes/babs/working/boeings/"
} else if (dir.exists("Y:/working/boeings/")){
hpc.mount <- "Y:/working/boeings/"
} else if (dir.exists("/camp/stp/babs/working/boeings/")){
hpc.mount <- "/camp/stp/babs/working/boeings/"
} else {
hpc.mount <- ""
}
FN <- paste0(hpc.mount, "Projects/reference_data/documentation/BC.parameters.txt")
dbTable <- read.delim(
FN,
sep = "\t",
stringsAsFactors = F
)
db.pwd <- as.vector(dbTable[1,1])
dbDB <- DBI::dbConnect(
drv = RMySQL::MySQL(),
user = "boeingS",
password = db.pwd,
host = "10.27.241.82",
dbname="operational"
)
res <- DBI::dbGetQuery(dbDB, "SELECT User, Host, Password FROM mysql.user;")
DBI::dbDisconnect(dbDB)
## Get all users on shiny-bioinformatics.crick.ac.uk ##
query <- "SELECT User, Host, Password FROM mysql.user where Host = 'shiny-bioinformatics.crick.ac.uk';"
dbDB <- DBI::dbConnect(
drv = RMySQL::MySQL(),
user = "boeingS",
password = db.pwd,
host = "10.27.241.82",
dbname="operational"
)
dfRes <- DBI::dbGetQuery(dbDB, query)
DBI::dbDisconnect(dbDB)
dfRes <- dfRes[(dfRes$User %in% c("DocuData")), ]
dfRes
i=1
username <- as.vector(dfRes$User[i])
pass <- as.vector(dfRes[i,"Password"])
dbDB <- DBI::dbConnect(
drv = RMySQL::MySQL(),
user = "boeingS",
password = db.pwd,
host = "10.27.241.82",
dbname="operational"
)
query <- paste0("SHOW GRANTS FOR '",as.vector(dfRes$User[i]),"'@'shiny-bioinformatics.crick.ac.uk';")
dfRes2 <- DBI::dbGetQuery(dbDB, query)
DBI::dbDisconnect(dbDB)
dfRes2
new.user <- paste0("'",username, "'@'bioinformatics.crick.ac.uk'")
query.u <- paste0("SELECT User, Host from mysql.user where User = '",username,"' and Host = 'bioinformatics.crick.ac.uk'")
dbDB <- DBI::dbConnect(
drv = RMySQL::MySQL(),
user = "boeingS",
password = db.pwd,
host = "10.27.241.82",
dbname="operational"
)
dfExist <- DBI::dbGetQuery(dbDB, query.u)
DBI::dbDisconnect(dbDB)
dfExist
nrow(dfExist) == 1
query.drop <- paste0("drop user '",username, "'@'bioinformatics.crick.ac.uk'")
dbDB <- DBI::dbConnect(
drv = RMySQL::MySQL(),
user = "boeingS",
password = db.pwd,
host = "10.27.241.82",
dbname="operational"
)
h2 <- DBI::dbGetQuery(dbDB, query.drop)
DBI::dbDisconnect(dbDB)
query.nu <- paste0("create user ",new.user," IDENTIFIED BY PASSWORD '",as.vector(dfRes$Password[i]),"';")
dbDB <- DBI::dbConnect(
drv = RMySQL::MySQL(),
user = "boeingS",
password = db.pwd,
host = "10.27.241.82",
dbname="operational"
)
h <- DBI::dbGetQuery(dbDB, query.nu)
DBI::dbDisconnect(dbDB)
print(paste0(username, " ", i))
dfUpdate
dfUpdate
dfUpload
install.packages("remotes")
remotes::install_github("decusInLabore/biologicSeqTools")
remotes::install_github("decusinlabore/biologicViewerSC")
install.packages("remotes")
appParameterFile_Hpoly <-   system.file("extdata/examples/Hpoly.db.txt",package = "biologicViewerSC")
pathToAppColorParameters_Hpoly <- system.file("extdata/examples/Hpoly.colorParameters.txt",package = "biologicViewerSC")
## Here are build-in example files for the Ifng dataset:
## here: https://shiny-bioinformatics.crick.ac.uk/shiny/boeings/GliaIfngrKO_app
appParameterFile_WT_MT_infected <- system.file("extdata/examples/WT_MT_infected.db.txt",package = "biologicViewerSC")
pathToAppColorParameters_WT_MT_infected <- system.file("extdata/examples/WT_MT_infected.colorParameters.txt",package = "biologicViewerSC")
getwd()
setwd("Y:/working/boeings/Projects/boeings/stefan.boeing/dev_optim/biologicSeqTools2/")
devtools::check()
devtools::check()
