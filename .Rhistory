hpc.mount <- "Y:/working/boeings/"
} else if (dir.exists("/camp/stp/babs/working/boeings/")){
hpc.mount <- "/camp/stp/babs/working/boeings/"
} else {
hpc.mount <- ""
}
#Create the environment and load a suitable version of R, e.g. so:
FN <- paste0(hpc.mount, "Projects/reference_data/documentation/BC.parameters.txt")
dbTable <- read.delim(
FN,
sep = "\t",
stringsAsFactors = F
)
db.pwd <- as.vector(dbTable[1,1])
###############################################################################
##                                                                           ##
if (!requireNamespace("remotes")){
install.packages("remotes")
}
remotes::install_github("rstudio/renv")
username <- "testExperiment_da"
pass <- "KLMYk8eC"
host <- "10.27.241.82"
db <- "agl_data"
designTB <- "testExperiment_designTable"
mainTB <- "testExperiment_bulk_rna_seq_table"
pcaTB <- "testExperiment_PCA"
species <- "mus_musculus"
geneIDcolumn <- "mgi_symbol"
alignmentGeneID <- "ENSMUSG"
designTScol <- "timepoint"
devtools::install_github("decusinlabore/bioLOGIC")
#}
library(bioLOGIC)
## Load the design table from database. Here we will retrieve information on samples.
dfDesign <- import.db.table.from.db(
dbname = db,
dbtable = designTB,
host = host,
user = username,
password = pass
)
dfMainData <- import.db.table.from.db(
dbname = db,
dbtable = mainTB,
host = host,
user = username,
password = pass
)
dfPCA <- import.db.table.from.db(
dbname = db,
dbtable = pcaTB,
host = host,
user = username,
password = pass
)
dfVar <- dfMainData[dfMainData$logFC_cut_off != 0 ,c(geneIDcolumn, alignmentGeneID)]
mostVarGenes <- as.vector(unique(sort(dfVar[,geneIDcolumn])))
mostVarGenes <- na.omit(mostVarGenes[mostVarGenes != ""])
# Most variable gene IDs
mostVarIDs <- as.vector(unique(sort(dfVar[,alignmentGeneID])))
mostVarIDs <- na.omit(mostVarIDs[mostVarIDs != ""])
username <- "testExperiment_da"
pass <- "KLMYk8eC"
host <- "10.27.241.82"
db <- "agl_data"
designTB <- "testExperiment_designTable"
mainTB <- "testExperiment_bulk_rna_seq_table"
pcaTB <- "testExperiment_PCA"
species <- "mus_musculus"
geneIDcolumn <- "mgi_symbol"
alignmentGeneID <- "ENSMUSG"
designTScol <- "timepoint"
dfDesign <- import.db.table.from.db(
dbname = db,
dbtable = designTB,
host = host,
user = username,
password = pass
)
dfMainData <- import.db.table.from.db(
dbname = db,
dbtable = mainTB,
host = host,
user = username,
password = pass
)
dfPCA <- import.db.table.from.db(
dbname = db,
dbtable = pcaTB,
host = host,
user = username,
password = pass
)
head(dfDesign)
username <- "testExperiment_da"
pass <- "KLMYk8eC"
host <- "10.27.241.82"
db <- "agl_data"
designTB <- "testExperiment_designTable"
mainTB <- "testExperiment_bulk_rna_seq_table"
pcaTB <- "testExperiment_PCA"
species <- "mus_musculus"
geneIDcolumn <- "mgi_symbol"
alignmentGeneID <- "ENSMUSG"
designTScol <- "timepoint"
library(bioLOGIC)
## Load the design table from database. Here we will retrieve information on samples.
dfDesign <- import.db.table.from.db(
dbname = db,
dbtable = designTB,
host = host,
user = username,
password = pass
)
dfMainData <- import.db.table.from.db(
dbname = db,
dbtable = mainTB,
host = host,
user = username,
password = pass
)
dfPCA <- import.db.table.from.db(
dbname = db,
dbtable = pcaTB,
host = host,
user = username,
password = pass
)
dfPCA
200/5000
dfCat <- read.delim(
"C:/Users/boeings/OneDrive - The Francis Crick Institute/Desktop/SC21185.signature.gene.sets_MM.txt",
sep = "\t",
stringsAsFactors = F
)
dfAnno <- read.delim(
"Y:/working/boeings/Projects/reference_data/gene_id_annotation_files/20171206.release-89.mm.ENSMUSG.mgi.entrez.uniprot.description.hgnc.table.txt",
sep = "\t",
header =T,
stringsAsFactors = F
)
View(dfCat)
ncol(dfCat)
transGenes <- unique(dfCat[,16])
transGenes
transGenes <- unique(dfCat[2:nrow(dfCat),16])
transGenes
transGenes <- transGenes[transGenes != ""]
dfAnno <- unique(dfAnno[,c("hgnc_symbol", "mgi_symbol")])
head(dfAnno)
dfAnno <- dfAnno[dfAnno$hgnc_symbol != "",]
dfTrans <- dfAnno[dfAnno$mgi_symbol %in% transGenes, ]
dfTrans
dfTrans <- dfAnno[dfAnno$hgnc_symbol %in% transGenes, ]
dfTrans
dim(dfTrans)
write.table(
dfTrans,
"C:/Users/boeings/OneDrive - The Francis Crick Institute/Desktop/genes16.txt",
sep = "\t",
row.names=F
)
transGenes <- unique(dfCat[2:nrow(dfCat),17])
transGenes <- transGenes[transGenes != ""]
dfTrans <- dfAnno[dfAnno$hgnc_symbol %in% transGenes, ]
write.table(
dfTrans,
"C:/Users/boeings/OneDrive - The Francis Crick Institute/Desktop/genes17.txt",
sep = "\t",
row.names=F
)
username <- "RN21224_da"
pass <- "cDCSpknd"
host <- "10.27.241.82"
db <- "dal_data"
designTB <- "RN21224_designTable"
mainTB <- "RN21224_bulk_rna_seq_table"
pcaTB <- "RN21224_PCA"
species <- "mus_musculus"
geneIDcolumn <- "mgi_symbol"
alignmentGeneID <- "ENSMUSG"
devtools::install_github("decusinlabore/bioLOGIC")
#}
library(bioLOGIC)
## Load the design table from database. Here we will retrieve information on samples.
dfDesign <- import.db.table.from.db(
dbname = db,
dbtable = designTB,
host = host,
user = username,
password = pass
)
dfDesign
dfMainData <- import.db.table.from.db(
dbname = db,
dbtable = mainTB,
host = host,
user = username,
password = pass
)
DotPlot(
object = OsC_DP,
assay =  "RNA",
features = dpGenes,
cols = c("lightgrey", "blue"),
col.min = -2.5,
col.max = 2.5,
dot.min = 0,
dot.scale = 6,
#idents = NULL,
group.by = NULL,
split.by = NULL,
#cluster.idents = FALSE,
scale = TRUE,
scale.by = "radius",
scale.min = NA,
scale.max = NA
)
getwd()
R.version
if (dir.exists("/Volumes/babs/working/boeings/")){
hpc.mount <- "/Volumes/babs/working/boeings/"
} else if (dir.exists("Y:/working/boeings/")){
hpc.mount <- "Y:/working/boeings/"
} else if (dir.exists("/camp/stp/babs/working/boeings/")){
hpc.mount <- "/camp/stp/babs/working/boeings/"
} else {
hpc.mount <- ""
}
FN <- paste0(hpc.mount, "Projects/reference_data/documentation/BC.parameters.txt")
dbTable <- read.delim(
FN,
sep = "\t",
stringsAsFactors = F
)
db.pwd <- as.vector(dbTable[1,1])
dbDB <- DBI::dbConnect(
drv = RMySQL::MySQL(),
user = "boeingS",
password = db.pwd,
host = "10.27.241.82",
dbname="operational"
)
res <- DBI::dbGetQuery(dbDB, "SELECT User, Host, Password FROM mysql.user;")
DBI::dbDisconnect(dbDB)
## Get all users on shiny-bioinformatics.crick.ac.uk ##
query <- "SELECT User, Host, Password FROM mysql.user where Host = 'shiny-bioinformatics.crick.ac.uk';"
dbDB <- DBI::dbConnect(
drv = RMySQL::MySQL(),
user = "boeingS",
password = db.pwd,
host = "10.27.241.82",
dbname="operational"
)
dfRes <- DBI::dbGetQuery(dbDB, query)
DBI::dbDisconnect(dbDB)
dfRes <- dfRes[(dfRes$User %in% c("DocuData")), ]
dfRes
i=1
username <- as.vector(dfRes$User[i])
pass <- as.vector(dfRes[i,"Password"])
dbDB <- DBI::dbConnect(
drv = RMySQL::MySQL(),
user = "boeingS",
password = db.pwd,
host = "10.27.241.82",
dbname="operational"
)
query <- paste0("SHOW GRANTS FOR '",as.vector(dfRes$User[i]),"'@'shiny-bioinformatics.crick.ac.uk';")
dfRes2 <- DBI::dbGetQuery(dbDB, query)
DBI::dbDisconnect(dbDB)
dfRes2
new.user <- paste0("'",username, "'@'bioinformatics.crick.ac.uk'")
query.u <- paste0("SELECT User, Host from mysql.user where User = '",username,"' and Host = 'bioinformatics.crick.ac.uk'")
dbDB <- DBI::dbConnect(
drv = RMySQL::MySQL(),
user = "boeingS",
password = db.pwd,
host = "10.27.241.82",
dbname="operational"
)
dfExist <- DBI::dbGetQuery(dbDB, query.u)
DBI::dbDisconnect(dbDB)
dfExist
nrow(dfExist) == 1
query.drop <- paste0("drop user '",username, "'@'bioinformatics.crick.ac.uk'")
dbDB <- DBI::dbConnect(
drv = RMySQL::MySQL(),
user = "boeingS",
password = db.pwd,
host = "10.27.241.82",
dbname="operational"
)
h2 <- DBI::dbGetQuery(dbDB, query.drop)
DBI::dbDisconnect(dbDB)
query.nu <- paste0("create user ",new.user," IDENTIFIED BY PASSWORD '",as.vector(dfRes$Password[i]),"';")
dbDB <- DBI::dbConnect(
drv = RMySQL::MySQL(),
user = "boeingS",
password = db.pwd,
host = "10.27.241.82",
dbname="operational"
)
h <- DBI::dbGetQuery(dbDB, query.nu)
DBI::dbDisconnect(dbDB)
print(paste0(username, " ", i))
dfUpdate
dfUpdate
dfUpload
install.packages("remotes")
remotes::install_github("decusInLabore/biologicSeqTools")
remotes::install_github("decusinlabore/biologicViewerSC")
install.packages("remotes")
appParameterFile_Hpoly <-   system.file("extdata/examples/Hpoly.db.txt",package = "biologicViewerSC")
pathToAppColorParameters_Hpoly <- system.file("extdata/examples/Hpoly.colorParameters.txt",package = "biologicViewerSC")
## Here are build-in example files for the Ifng dataset:
## here: https://shiny-bioinformatics.crick.ac.uk/shiny/boeings/GliaIfngrKO_app
appParameterFile_WT_MT_infected <- system.file("extdata/examples/WT_MT_infected.db.txt",package = "biologicViewerSC")
pathToAppColorParameters_WT_MT_infected <- system.file("extdata/examples/WT_MT_infected.colorParameters.txt",package = "biologicViewerSC")
devtools::install_github("immunogenomics/harmony")
Sys.unsetenv(GITHUB_PAT)
Sys.unsetenv("GITHUB_PAT")
devtools::install_github("immunogenomics/harmony")
devtools::install_github("powellgenomicslab/scPred")
devtools::install_github("powellgenomicslab/scPred")
renv::update("rlang")
renv::install("powellgenomicslab/scPred")
Sys.unsetenv("GITHUB_PAT")
renv::install("powellgenomicslab/scPred")
renv::install("vctrs")
renv::install("powellgenomicslab/scPred")
renv::update()
renv::install("powellgenomicslab/scPred")
Sys.unsetenv("GITHUB_PAT")
renv::install("powellgenomicslab/scPred")
library("scPred")
library("Seurat")
library("magrittr")
reference <- scPred::pbmc_1
query <- scPred::pbmc_2
reference <- reference %>%
NormalizeData() %>%
FindVariableFeatures() %>%
ScaleData() %>%
RunPCA() %>%
RunUMAP(dims = 1:30)
DimPlot(reference, group.by = "cell_type", label = TRUE, repel = TRUE)
class(reference)
reference
query
reference <- getFeatureSpace(reference, "cell_type")
reference <- trainModel(reference)
get_probabilities(reference) %>% head()
get_scpred(reference)
plot_probabilities(reference)
reference <- trainModel(reference, model = "mda", reclassify = c("cMono", "ncMono"))
get_classifiers(reference)
caret::plot.train(get_classifiers(reference)[["NK cell"]])
reference <- trainModel(reference, model = "glm")
get_scpred(reference)
query <- scPredict(query, reference, recompute_alignment = FALSE)
query <- scPredict(query, reference, recompute_alignment = FALSE, threshold = 0.9)
library(doParallel)
cl <- makePSOCKcluster(2)
registerDoParallel(cl)
reference <- trainModel(reference, model = "mda", allowParallel = TRUE)
stopCluster(cl)
scpred <- get_scpred(reference)
query <- scPredict(query, scpred)
refFN <- "Y:/working/boeings/Projects/bonfantip/roberta.ragazzini/446_scRNAseq_subClustering_pbl359B_12clusters/workdir/pbl359BsubCluster.Seurat.Robj"
load(refFN)
reference <- OsC
queryFN <- "Y:/working/boeings/Projects/bonfantip/roberta.ragazzini/476_scRNAseq_A1A6_SC21201/workdir/A123456.Seurat.Robj"
load(queryFN)
query <- OsC
DimPlot(reference, group.by = "cell_type", label = TRUE, repel = TRUE)
names(reference@meta.data)
DimPlot(reference, group.by = "clusterName", label = TRUE, repel = TRUE)
reference <- getFeatureSpace(reference, "clusterName")
reference@reductions
reference@active.assay
DefaultAssay(reference) <- "integrated"
reference <- getFeatureSpace(reference, "clusterName")
reference <- trainModel(reference)
get_probabilities(reference) %>% head()
get_scpred(reference)
plot_probabilities(reference)
DefaultAssay(query) <- "integrated"
query <- scPredict(query, reference)
DimPlot(query, group.by = "scpred_prediction", reduction = "scpred")
names(query@meta.data)
query@meta.data$scpred_Ionocytes
head(query@meta.data$scpred_Ionocytes)
query@meta.data$scpred
query <- RunUMAP(query, reduction = "scpred", dims = 1:30)
DimPlot(query, group.by = "scpred_prediction", label = TRUE, repel = TRUE)
DimPlot(query, group.by = "cell_type", label = TRUE, repel = TRUE)
DimPlot(query, group.by = "clusterName", label = TRUE, repel = TRUE)
DimPlot(reference)
DimPlot(query)
DimPlot(query, group.by = "clusterName")
crossTab(query, "clusterName", "scpred_prediction")
crossTab(query, "cell_type", "scpred_prediction", output = "prop")
crossTab(query, "clusterName", "scpred_prediction", output = "prop")
get_classifiers(reference)
queryFN <- "Y:/working/boeings/Projects/bonfantip/roberta.ragazzini/484B_SC22096subset_scRNAseq_Characterisation_EpCAM_CD90_thymic_epithelial_cells_SC22096/"
queryFN <- "Y:/working/boeings/Projects/bonfantip/roberta.ragazzini/484B_SC22096subset_scRNAseq_Characterisation_EpCAM_CD90_thymic_epithelial_cells_SC22096/workdir/SC22096subset.Seurat.Robj"
query <- OsC
DefaultAssay(query) <- "integrated"
load(queryFN)
DefaultAssay(query) <- "integrated"
DimPlot(reference, group.by = "clusterName", label = TRUE, repel = TRUE)
reference <- getFeatureSpace(reference, "clusterName")
rm(OsC)
reference <- getFeatureSpace(reference, "clusterName")
reference <- trainModel(reference)
get_probabilities(reference) %>% head()
get_scpred(reference)
plot_probabilities(reference)
crossTab(query, "clusterName", "scpred_prediction", output = "prop")
get_classifiers(reference)
query
query <- scPredict(query, reference)
DimPlot(query, group.by = "scpred_prediction", reduction = "scpred")
DimPlot(query, group.by = "scpred_prediction", label = TRUE, repel = TRUE)
DimPlot(query, group.by = "clusterName", label = TRUE, repel = TRUE)
DimPlot(reference, group.by = "clusterName", label = TRUE, repel = TRUE)
DimPlot(query, group.by = "clusterName", label = TRUE, repel = TRUE)
refFN <- "Y:/working/boeings/Projects/bonfantip/roberta.ragazzini/446_scRNAseq_subClustering_pbl359B_12clusters/workdir/pbl359BsubCluster.Seurat.Robj"
load(refFN)
reference <- OsC
DefaultAssay(reference) <- "integrated"
queryFN <- "Y:/working/boeings/Projects/bonfantip/roberta.ragazzini/484B_SC22096subset_scRNAseq_Characterisation_EpCAM_CD90_thymic_epithelial_cells_SC22096/workdir/SC22096subset.Seurat.Robj"load(queryFN)
load(queryFN)
query <- OsC
DefaultAssay(query) <- "integrated"
queryFN <- "Y:/working/boeings/Projects/bonfantip/roberta.ragazzini/484B_SC22096subset_scRNAseq_Characterisation_EpCAM_CD90_thymic_epithelial_cells_SC22096/workdir/SC22096subset.Seurat.Robj"
load(queryFN)
query <- OsC
DefaultAssay(query) <- "integrated"
DimPlot(reference, group.by = "clusterName", label = TRUE, repel = TRUE)
reference <- getFeatureSpace(reference, "clusterName")
rm(OsC)
reference <- getFeatureSpace(reference, "clusterName")
reference <- trainModel(reference)
get_scpred(reference)
plot_probabilities(reference)
DimPlot(query)
DimPlot(reference)
queryFN <- "Y:/working/boeings/Projects/bonfantip/roberta.ragazzini/484B_SC22096subset_scRNAseq_Characterisation_EpCAM_CD90_thymic_epithelial_cells_SC22096/workdir/SC22096subset.Seurat.Robj"
load(queryFN)
query <- OsC
DefaultAssay(query) <- "integrated"
DimPlot(query)
query <- scPredict(query, reference)
rm(OsC)
query <- scPredict(query, reference)
?scPred::trainModel
library(Quandl)
Quandl("EUREX/FEU3K2016", api_key="J4UZ12QRXuKMrCaZxn6o")
library(Quandl)
install.packages("Quandl")
library(Quandl)
d <- Quandl("EUREX/FEU3K2016", api_key="J4UZ12QRXuKMrCaZxn6o")
View(d)
euribor <- Quandl("ECB/RTD_M_S0_N_C_EUR1Y_E", api_key="J4UZ12QRXuKMrCaZxn6o")
View(euribor)
plot(euribor$`Percent per annum`)
plot(rev(euribor$`Percent per annum`))
plot(rev(euribor$`Percent per annum`), type="l")
ecb <- Quandl("ECB/FM_B_U2_EUR_4F_KR_MLFR_LEV", api_key="J4UZ12QRXuKMrCaZxn6o")
plot(rev(ecb$`Percent per annum`))
View(ecb)
head(ecb)
head(euribor)
d <- dplyr::full_join(
euribor,
ecb,
by = "Date"
)
head(d)
head(euribor)
head(ecb)
d <- na.omit(d)
View(d)
heaD(euribor)
head(euribor)
head(ec)
head(ecb)
tail(ecb)
ecb <- Quandl("ECB/RTD_M_S0_N_C_EUR1Y_E", api_key="J4UZ12QRXuKMrCaZxn6o")
head(ecb)
tail(ecb)
head(ecb)
head(euribor)
View(euribor)
setwd("Y:/working/boeings/Projects/boeings/stefan.boeing/dev_optim/biologicSeqTools2")
rm(list=ls())
getwd()
devtools::check()
getwd()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
getwd()
devtools::document()
devtools::document()
devtools::document()
